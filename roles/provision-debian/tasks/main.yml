---
- name: Find virtual machine ID
  delegate_to: "{{ esxi_config.host }}"
  shell: "vim-cmd vmsvc/getallvms | grep -F '{{ esxi_config.vm.display_name }}' | awk '{print $1;}'"
  register: vmlist_out

- name: Get ID of the provisioning network
  delegate_to: "{{ esxi_config.host }}"
  shell: "grep -F '.networkName = \"VM Network\"' /vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}/{{ esxi_config.vm.name }}.vmx | awk -F . '{ print $1; }'"
  register: prov_network_id

- name: Get the MAC of the provisioning network
  delegate_to: "{{ esxi_config.host }}"
  shell: "grep -F '{{ prov_network_id.stdout }}.generatedAddress = \"' /vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}/{{ esxi_config.vm.name }}.vmx | awk -F = '{ print $2; }' | sed -e 's/[ \"]//g'"
  register: provision_network_mac

- set_fact: pxe_mac="{{ provision_network_mac.stdout }}"

- name: Make a boot ID
  command: "pwgen -s -1 16"
  run_once: True
  register: prov_id

- name: Get origin zygote vars
  set_fact:
    zygote_config="{{ hostvars[origin_zygote].zygote_config }}"
    zygote_store="{{ hostvars[origin_zygote].zygote_store }}"
    zygote_network="{{ hostvars[origin_zygote].zygote_network }}"

- set_fact:
    prov_dir: "host/{{ prov_id.stdout }}"
    store_prov_dir: "{{ zygote_store.tftproot }}/host/{{ prov_id.stdout }}"

- set_fact: kickstart_url="{{ zygote_store.http_baseurl }}/{{ prov_dir }}/boot/preseed"

- name: Load image descriptor
  include_vars:
    name: imageconfig
    file: "{{ zygote_store.tftproot }}/{{ netboot_image_path }}/imageconfig.yml"

- name: Create layout for prov "{{ prov_dir }}"
  file: path="{{ item }}" state=directory
  with_items:
    - "{{ store_prov_dir }}"
    - "{{ store_prov_dir }}/boot"
    - "{{ store_prov_dir }}/state"

- name: Add permissions to allow access by state-report.cgi
  acl: path="{{ store_prov_dir }}/state" etype=user entity="{{ zygote_store.cgi_bin_user }}" permissions=rwx state=present

# Build provdir from skel files for the selected pack
- name: Copy skel files
  copy: src="{{ item }}" dest="{{ store_prov_dir }}/boot"
  with_fileglob:
    - "{{ imageconfig.store_skel_dir }}/*"

- template:
    src: "{{ store_prov_dir }}/boot/pxelinux.cfg.j2"
    dest: "{{ store_prov_dir }}/boot/pxelinux.cfg"

- template: src=preseed.j2 dest="{{ store_prov_dir }}/boot/preseed"
- template: src=late_command.j2 dest="{{ store_prov_dir }}/boot/late_command"
- template: src=prov-bootoptions.conf.j2 dest="{{ zygote_config.config_root }}/dnsmasq-{{ zygote_network.interface }}.conf.d/boot-{{ prov_id.stdout }}-options.conf"
- template: src=prov-hostoptions.conf.j2 dest="{{ zygote_config.config_root }}/hosts-{{ zygote_network.interface }}.d/host-{{ inventory_hostname }}.conf"

- name: Restart dnsmasq services
  command: "sudo systemctl restart dnsmasq@{{ zygote_network.interface}}.service"

- name: Get VM state
  delegate_to: "{{ esxi_config.host }}"
  shell: "vim-cmd vmsvc/get.summary {{ vmlist_out.stdout }}"
  register: vmstate_out

- name: Reboot virtual machine
  delegate_to: "{{ esxi_config.host }}"
  command: "vim-cmd vmsvc/power.reset {{ vmlist_out.stdout }}"
  when: vmstate_out.stdout.find('powerState = "poweredOn"') != -1

- name: Power on virtual machine
  delegate_to: "{{ esxi_config.host }}"
  command: "vim-cmd vmsvc/power.on {{ vmlist_out.stdout }}"
  when: vmstate_out.stdout.find('powerState = "poweredOff"') != -1
  
- name: Wait until the installer ends
  wait_for: path="{{ store_prov_dir }}/state/post-install" state=present delay=30 timeout=6000

# Installer has finished
- name: Cleanup prov "{{ prov_id.stdout }}"
  file:
    state: absent
    path:
      - "{{ zygote_config.config_root }}/dnsmasq-{{ zygote_network.interface }}.conf.d/boot-{{ prov_id.stdout }}-options.conf"
      - "{{ zygote_config.config_root }}/hosts-{{ zygote_network.interface }}.d/host-{{ inventory_hostname }}.conf"
      - "{{ store_prov_dir }}"

- name: Restart dnsmasq services
  command: "sudo systemctl restart dnsmasq@{{ zygote_network.interface}}.service"

- name: Wait for SSH
  wait_for_connection: delay=30 timeout=600

- name: Fetch the SSH server key
  delegate_to: localhost
  command: "ssh-keyscan {{ ansible_host }}"
  register: ssh_key

- name: Remember SSH key
  delegate_to: localhost
  known_hosts: name="{{ ansible_host }}" key="{{ ssh_key.stdout }}"

- name: Collect facts
  setup:

- name: Update apt
  apt: update_cache=yes
