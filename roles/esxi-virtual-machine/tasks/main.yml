---
- set_fact: vm_dir="/vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}"
- set_fact: vmx_path="/vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}/{{ esxi_config.vm.name }}.vmx"

- set_fact: iso="{{ hostvars[esxi_config.host].iso_store }}/{{ esxi_config.vm.iso }}"
  when: esxi_config.vm.iso is defined

- name: Create directory for the VM
  file: state=directory path="{{ vm_dir }}"

- name: Check if not yet registered
  shell: "vim-cmd vmsvc/getallvms | grep -F '{{ esxi_config.vm.display_name }}' | awk '{print $1;}'"
  register: vmlist_out

- name: Create VMX file for the VM
  template: src="basic.vmx.j2" dest="{{ vmx_path }}"
  vars:
    vm: "{{ esxi_config.vm }}"
  when: vmlist_out.stdout == "" 

- name: Create VMDK disks
  command: "vmkfstools -c {{ item.size_gb }}G {{ vm_dir }}/{{ item.name }}.vmdk"
  args:
    creates: "{{ vm_dir }}/{{ item.name }}.vmdk"
  with_items: "{{ esxi_config.vm.disks }}"

- name: Register VMX
  command: "vim-cmd solo/registervm {{ vmx_path }}"
  when: vmlist_out.stdout == ""

- name: Find virtual machine ID
  delegate_to: "{{ esxi_config.host }}"
  shell: "vim-cmd vmsvc/getallvms | grep -F '{{ esxi_config.vm.display_name }}' | awk '{print $1;}'"
  register: vmlist_out

- name: Get VM state
  delegate_to: "{{ esxi_config.host }}"
  shell: "grep 'generatedAddress = ' {{ vmx_path }} || true"
  register: vmaddr_out

#
# We need to powerup/powerdown to generate the MAC addresses
#
- name: Power on virtual machine
  delegate_to: "{{ esxi_config.host }}"
  command: "vim-cmd vmsvc/power.on {{ vmlist_out.stdout }}"
  when: vmaddr_out.stdout == ''

- name: Power off virtual machine
  delegate_to: "{{ esxi_config.host }}"
  command: "vim-cmd vmsvc/power.off {{ vmlist_out.stdout }}"
  when: vmaddr_out.stdout == ''

#
# Set the prov network as a fact
#
- name: Find virtual machine ID
  delegate_to: "{{ esxi_config.host }}"
  shell: "vim-cmd vmsvc/getallvms | grep -F '{{ esxi_config.vm.display_name }}' | awk '{print $1;}'"
  register: vmlist_out

- name: Get ID of the provisioning network
  delegate_to: "{{ esxi_config.host }}"
  shell: "grep -F '.networkName = \"{{ esxi_config.vm.prov_network }}\"' /vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}/{{ esxi_config.vm.name }}.vmx | awk -F . '{ print $1; }'"
  register: prov_network_id

- name: Get the MAC of the provisioning network
  delegate_to: "{{ esxi_config.host }}"
  shell: "grep -F '{{ prov_network_id.stdout }}.generatedAddress = \"' /vmfs/volumes/{{ esxi_config.vm.datastore }}/{{ esxi_config.vm.name }}/{{ esxi_config.vm.name }}.vmx | awk -F = '{ print $2; }' | sed -e 's/[ \"]//g'"
  register: provision_network_mac

# FIXME: This assumes that ethernet<n> interfaces in vmx will match one-to-one to eth<n> when the installer boots
- set_fact:
    install_iface: "eth{{ prov_network_id.stdout | replace('ethernet', '') }}"

- set_fact: pxe_mac="{{ provision_network_mac.stdout }}"

